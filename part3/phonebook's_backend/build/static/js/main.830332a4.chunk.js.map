{"version":3,"sources":["services/phonebook.js","components/Notification.js","components/PersonForm.js","components/Persons.js","components/Filter.js","App.js","index.js"],"names":["baseUrl","phonebookService","getAll","axios","get","then","response","data","create","personObject","post","remove","id","delete","update","newObject","put","Notification","notification","className","type","message","PersonForm","addPerson","setNewName","setNewNumber","newName","newNumber","onSubmit","value","onChange","event","target","Persons","personsToShow","deletePerson","map","person","name","number","onClick","Filter","setSearch","search","App","useState","persons","setPersons","setNotification","useEffect","initialPersons","notifyWith","setTimeout","filter","toUpperCase","includes","preventDefault","existing","find","window","confirm","updatedPerson","newPerson","catch","error","concat","toDelete","updatedPhonebook","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.830332a4.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = (personObject) => {\r\n    const request = axios.post(baseUrl, personObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nconst phonebookService = { getAll, create, remove, update }\r\n\r\nexport default phonebookService","import React from 'react'\r\n\r\nconst Notification = ({ notification }) => {\r\n  if (notification === null) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className={notification.type}>\r\n      {notification.message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\n\r\nconst PersonForm = ({ addPerson, setNewName, setNewNumber, newName, newNumber }) => (\r\n  <form onSubmit={addPerson}>\r\n    <div>\r\n      Name: <input value={newName} onChange={event => setNewName(event.target.value)} />\r\n    </div>\r\n    <div>\r\n      Number: <input value={newNumber} onChange={event => setNewNumber(event.target.value)} />\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\">add</button>\r\n    </div>\r\n  </form>\r\n)\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Persons = ({ personsToShow, deletePerson }) => (\r\n    <div>\r\n      {personsToShow.map(person =>\r\n        <div key={person.id}>\r\n          {person.name} {person.number} <button onClick={() => deletePerson(person.id)}>delete</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n  \r\nexport default Persons","import React from 'react'\r\n\r\nconst Filter = ({ setSearch, search }) => (\r\n  <div> \r\n    Filter shown with <input value={search} onChange={event => setSearch(event.target.value)} />\r\n  </div>\r\n)\r\n\r\nexport default Filter\r\n","import React, { useState, useEffect } from 'react'\nimport phonebookService from './services/phonebook'\nimport Notification from './components/Notification'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ search, setSearch ] = useState('')\n  const [ notification, setNotification ] = useState(null)\n\n  useEffect(() => {\n    phonebookService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const notifyWith = (message, type='success') => {\n    setNotification({ message, type })\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  } \n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    const existing = persons.find(person => person.name === newName)\n    if (existing) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const updatedPerson = {...existing, number: newNumber}\n\n        phonebookService\n          .update(existing.id, updatedPerson)\n          .then(newPerson => {\n            setPersons(persons.map(person => person.id !== updatedPerson.id ? person : newPerson ))\n            notifyWith(`Edited ${newPerson.name}'s number`)\n          })\n          .catch(error => {\n            notifyWith(error.response.data.error, 'error')\n          })\n      }\n    } else {\n      const personObject = { name: newName, number: newNumber }\n\n      phonebookService\n        .create(personObject)\n        .then(person => {\n          setPersons(persons.concat(person))\n          setNewName('')\n          setNewNumber('')\n          notifyWith(`Added ${person.name}`)\n        })\n        .catch(error => {\n          notifyWith(error.response.data.error, 'error')\n        })\n    }\n  }\n\n  const deletePerson = (id) => {\n    if (!window.confirm(`Delete ${persons.find(person => person.id === id).name} ?`)) {\n      return;\n    }\n\n    const toDelete = persons.find(person => person.id === id)\n    const updatedPhonebook = persons.filter(person => person.id !== id)\n\n    phonebookService\n      .remove(id)\n      .then(() => {\n        setPersons(updatedPhonebook)\n        notifyWith(`Deleted ${toDelete.name}`)\n      })\n      .catch(() => {\n        setPersons(updatedPhonebook)\n        notifyWith(`Information of ${toDelete.name} had already been removed from the server`, 'error')\n      })\n  }\n\n  const personsToShow = search\n    ? persons.filter(person => person.name.toUpperCase().includes(search.toUpperCase()))\n    : persons\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification notification={notification} />\n\n      <Filter\n        search={search} \n        setSearch={setSearch} \n      />\n\n      <h3>Add a new entry</h3>\n\n      <PersonForm \n        addPerson={addPerson} \n        setNewName={setNewName} \n        newName={newName}\n        setNewNumber={setNewNumber} \n        newNumber={newNumber}\n      />\n\n      <h3>Numbers</h3>\n\n      <Persons \n        personsToShow={personsToShow}\n        deletePerson={deletePerson}   \n      />\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}